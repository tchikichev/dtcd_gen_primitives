{
  "content": {
    "id": "282884d8-d140-4d39-b576-a41ccb9f55d7",
    "title": "WhatIf v0.7.0 FOR DEMO",
    "column": "24",
    "editMode": false,
    "plugins": [
      {
        "guid": "LogSystem_0_7_0",
        "meta": {
          "type": "core",
          "title": "Система логирования",
          "name": "LogSystem",
          "version": "0.7.0",
          "withDependencies": false,
          "priority": 7
        },
        "config": null
      },
      {
        "guid": "EventSystem_0_5_0",
        "meta": {
          "type": "core",
          "title": "Система cобытий",
          "name": "EventSystem",
          "priority": 6,
          "version": "0.5.0"
        },
        "config": {
          "subscriptions": [
            {
              "event": {
                "guid": "StorageSystem_0_9_0",
                "name": "TokenUpdate",
                "args": [],
                "id": "TokenUpdate[StorageSystem_0_9_0]"
              },
              "action": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "processTokenUpdateEvent",
                "args": null,
                "id": "DataSourceSystem_0_5_0[processTokenUpdateEvent]"
              }
            },
            {
              "event": {
                "guid": "StyleSystem_0_13_0",
                "name": "ThemeUpdate",
                "args": [],
                "id": "ThemeUpdate[StyleSystem_0_13_0]"
              },
              "action": {
                "guid": "AppGUISystem_0_4_0",
                "name": "updateTheme",
                "args": null,
                "id": "AppGUISystem_0_4_0[updateTheme]"
              }
            },
            {
              "event": {
                "guid": "NotificationSystem_0_1_1",
                "name": "newNotify",
                "args": [],
                "id": "newNotify[NotificationSystem_0_1_1]"
              },
              "action": {
                "guid": "HeaderPanel_top",
                "name": "onNewNotify",
                "args": null,
                "id": "HeaderPanel_top[onNewNotify]"
              }
            },
            {
              "event": {
                "guid": "NotificationSystem_0_1_1",
                "name": "removeNotify",
                "args": [],
                "id": "removeNotify[NotificationSystem_0_1_1]"
              },
              "action": {
                "guid": "HeaderPanel_top",
                "name": "onRemoveNotify",
                "args": null,
                "id": "HeaderPanel_top[onRemoveNotify]"
              }
            },
            {
              "event": {
                "guid": "NotificationSystem_0_1_1",
                "name": "clearNotifyList",
                "args": [],
                "id": "clearNotifyList[NotificationSystem_0_1_1]"
              },
              "action": {
                "guid": "HeaderPanel_top",
                "name": "onClearNotifyList",
                "args": null,
                "id": "HeaderPanel_top[onClearNotifyList]"
              }
            },
            {
              "event": {
                "guid": "WorkspaceSystem_0_15_0",
                "name": "WorkspaceCellClicked",
                "args": [],
                "id": "WorkspaceCellClicked[WorkspaceSystem_0_15_0]"
              },
              "action": {
                "guid": "ConfigEditorPanel_right",
                "name": "createConfigForm",
                "args": null,
                "id": "ConfigEditorPanel_right[createConfigForm]"
              }
            },
            {
              "event": {
                "name": "WorkspaceDeleted",
                "args": [],
                "id": "WorkspaceDeleted[undefined]"
              },
              "action": {
                "guid": "ConfigEditorPanel_right",
                "name": "clearConfigForm",
                "args": null,
                "id": "ConfigEditorPanel_right[clearConfigForm]"
              }
            },
            {
              "event": {
                "guid": "AppGUISystem_0_4_0",
                "name": "AreaClicked",
                "args": [],
                "id": "AreaClicked[AppGUISystem_0_4_0]"
              },
              "action": {
                "guid": "ConfigEditorPanel_right",
                "name": "createConfigForm",
                "args": null,
                "id": "ConfigEditorPanel_right[createConfigForm]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "ClearGraph",
                "args": [],
                "id": "ClearGraph[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "clearGraph",
                "args": null,
                "id": "LiveDashPanel_2[clearGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "DeleteFromServer",
                "args": [],
                "id": "DeleteFromServer[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "deleteFromServer",
                "args": null,
                "id": "LiveDashPanel_2[deleteFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "OpenFromFile",
                "args": [],
                "id": "OpenFromFile[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "openFromFile",
                "args": null,
                "id": "LiveDashPanel_2[openFromFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "OpenFromServer",
                "args": [],
                "id": "OpenFromServer[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "openFromServer",
                "args": null,
                "id": "LiveDashPanel_2[openFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "SaveToFile",
                "args": [],
                "id": "SaveToFile[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "saveToFile",
                "args": null,
                "id": "LiveDashPanel_2[saveToFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "SaveToServer",
                "args": [],
                "id": "SaveToServer[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "saveToServer",
                "args": null,
                "id": "LiveDashPanel_2[saveToServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "StartCalculatingGraph",
                "args": [],
                "id": "StartCalculatingGraph[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "startCalculatingGraph",
                "args": null,
                "id": "LiveDashPanel_2[startCalculatingGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "FitContent",
                "args": [],
                "id": "FitContent[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "fitContent",
                "args": null,
                "id": "LiveDashPanel_2[fitContent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "ZoomIn",
                "args": [],
                "id": "ZoomIn[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "zoomIn",
                "args": null,
                "id": "LiveDashPanel_2[zoomIn]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "ZoomOut",
                "args": [],
                "id": "ZoomOut[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "zoomOut",
                "args": null,
                "id": "LiveDashPanel_2[zoomOut]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "ZoomOriginal",
                "args": [],
                "id": "ZoomOriginal[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "zoomOriginal",
                "args": null,
                "id": "LiveDashPanel_2[zoomOriginal]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "CutItems",
                "args": [],
                "id": "CutItems[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "cutItems",
                "args": null,
                "id": "LiveDashPanel_2[cutItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "CopyItems",
                "args": [],
                "id": "CopyItems[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "copyItems",
                "args": null,
                "id": "LiveDashPanel_2[copyItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "PasteItems",
                "args": [],
                "id": "PasteItems[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "pasteItems",
                "args": null,
                "id": "LiveDashPanel_2[pasteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "DeleteItems",
                "args": [],
                "id": "DeleteItems[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "deleteItems",
                "args": null,
                "id": "LiveDashPanel_2[deleteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "UndoGraph",
                "args": [],
                "id": "UndoGraph[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "undoGraph",
                "args": null,
                "id": "LiveDashPanel_2[undoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "RedoGraph",
                "args": [],
                "id": "RedoGraph[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "redoGraph",
                "args": null,
                "id": "LiveDashPanel_2[redoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "SetNewGraph",
                "args": [],
                "id": "SetNewGraph[LiveDashPanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "setNewGraphInfo",
                "args": null,
                "id": "LiveDashPanel_2[setNewGraphInfo]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "ClearGraph",
                "args": [],
                "id": "ClearGraph[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "clearGraph",
                "args": null,
                "id": "LiveDashPanel_3[clearGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "DeleteFromServer",
                "args": [],
                "id": "DeleteFromServer[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "deleteFromServer",
                "args": null,
                "id": "LiveDashPanel_3[deleteFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "OpenFromFile",
                "args": [],
                "id": "OpenFromFile[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "openFromFile",
                "args": null,
                "id": "LiveDashPanel_3[openFromFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "OpenFromServer",
                "args": [],
                "id": "OpenFromServer[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "openFromServer",
                "args": null,
                "id": "LiveDashPanel_3[openFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "SaveToFile",
                "args": [],
                "id": "SaveToFile[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "saveToFile",
                "args": null,
                "id": "LiveDashPanel_3[saveToFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "SaveToServer",
                "args": [],
                "id": "SaveToServer[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "saveToServer",
                "args": null,
                "id": "LiveDashPanel_3[saveToServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "StartCalculatingGraph",
                "args": [],
                "id": "StartCalculatingGraph[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "startCalculatingGraph",
                "args": null,
                "id": "LiveDashPanel_3[startCalculatingGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "FitContent",
                "args": [],
                "id": "FitContent[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "fitContent",
                "args": null,
                "id": "LiveDashPanel_3[fitContent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "ZoomIn",
                "args": [],
                "id": "ZoomIn[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "zoomIn",
                "args": null,
                "id": "LiveDashPanel_3[zoomIn]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "ZoomOut",
                "args": [],
                "id": "ZoomOut[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "zoomOut",
                "args": null,
                "id": "LiveDashPanel_3[zoomOut]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "ZoomOriginal",
                "args": [],
                "id": "ZoomOriginal[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "zoomOriginal",
                "args": null,
                "id": "LiveDashPanel_3[zoomOriginal]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "CutItems",
                "args": [],
                "id": "CutItems[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "cutItems",
                "args": null,
                "id": "LiveDashPanel_3[cutItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "CopyItems",
                "args": [],
                "id": "CopyItems[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "copyItems",
                "args": null,
                "id": "LiveDashPanel_3[copyItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "PasteItems",
                "args": [],
                "id": "PasteItems[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "pasteItems",
                "args": null,
                "id": "LiveDashPanel_3[pasteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "DeleteItems",
                "args": [],
                "id": "DeleteItems[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "deleteItems",
                "args": null,
                "id": "LiveDashPanel_3[deleteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "UndoGraph",
                "args": [],
                "id": "UndoGraph[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "undoGraph",
                "args": null,
                "id": "LiveDashPanel_3[undoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "RedoGraph",
                "args": [],
                "id": "RedoGraph[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "redoGraph",
                "args": null,
                "id": "LiveDashPanel_3[redoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "SetNewGraph",
                "args": [],
                "id": "SetNewGraph[LiveDashPanel_3]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "setNewGraphInfo",
                "args": null,
                "id": "LiveDashPanel_3[setNewGraphInfo]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceStatusUpdate",
                "args": [
                  {
                    "dataSource": "Measurements",
                    "status": "success"
                  }
                ],
                "id": "DataSourceStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_2",
                "name": "processDataSourceEvent",
                "args": null,
                "id": "Visualization_EditableTable_2[processDataSourceEvent]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceWriteStatusUpdate",
                "args": [
                  {
                    "dataSource": "Measurements",
                    "status": "failed"
                  }
                ],
                "id": "DataSourceWriteStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_2",
                "name": "processDataSourceWriteEvent",
                "args": null,
                "id": "Visualization_EditableTable_2[processDataSourceWriteEvent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "ClearGraph",
                "args": [],
                "id": "ClearGraph[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "clearGraph",
                "args": null,
                "id": "LiveDashPanel_4[clearGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "DeleteFromServer",
                "args": [],
                "id": "DeleteFromServer[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "deleteFromServer",
                "args": null,
                "id": "LiveDashPanel_4[deleteFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "OpenFromFile",
                "args": [],
                "id": "OpenFromFile[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "openFromFile",
                "args": null,
                "id": "LiveDashPanel_4[openFromFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "OpenFromServer",
                "args": [],
                "id": "OpenFromServer[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "openFromServer",
                "args": null,
                "id": "LiveDashPanel_4[openFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "SaveToFile",
                "args": [],
                "id": "SaveToFile[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "saveToFile",
                "args": null,
                "id": "LiveDashPanel_4[saveToFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "SaveToServer",
                "args": [],
                "id": "SaveToServer[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "saveToServer",
                "args": null,
                "id": "LiveDashPanel_4[saveToServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "StartCalculatingGraph",
                "args": [],
                "id": "StartCalculatingGraph[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "startCalculatingGraph",
                "args": null,
                "id": "LiveDashPanel_4[startCalculatingGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "FitContent",
                "args": [],
                "id": "FitContent[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "fitContent",
                "args": null,
                "id": "LiveDashPanel_4[fitContent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "ZoomIn",
                "args": [],
                "id": "ZoomIn[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "zoomIn",
                "args": null,
                "id": "LiveDashPanel_4[zoomIn]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "ZoomOut",
                "args": [],
                "id": "ZoomOut[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "zoomOut",
                "args": null,
                "id": "LiveDashPanel_4[zoomOut]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "ZoomOriginal",
                "args": [],
                "id": "ZoomOriginal[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "zoomOriginal",
                "args": null,
                "id": "LiveDashPanel_4[zoomOriginal]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "CutItems",
                "args": [],
                "id": "CutItems[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "cutItems",
                "args": null,
                "id": "LiveDashPanel_4[cutItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "CopyItems",
                "args": [],
                "id": "CopyItems[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "copyItems",
                "args": null,
                "id": "LiveDashPanel_4[copyItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "PasteItems",
                "args": [],
                "id": "PasteItems[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "pasteItems",
                "args": null,
                "id": "LiveDashPanel_4[pasteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "DeleteItems",
                "args": [],
                "id": "DeleteItems[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "deleteItems",
                "args": null,
                "id": "LiveDashPanel_4[deleteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "UndoGraph",
                "args": [],
                "id": "UndoGraph[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "undoGraph",
                "args": null,
                "id": "LiveDashPanel_4[undoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "RedoGraph",
                "args": [],
                "id": "RedoGraph[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "redoGraph",
                "args": null,
                "id": "LiveDashPanel_4[redoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "SetNewGraph",
                "args": [],
                "id": "SetNewGraph[LiveDashPanel_4]"
              },
              "action": {
                "guid": "LiveDashPanel_4",
                "name": "setNewGraphInfo",
                "args": null,
                "id": "LiveDashPanel_4[setNewGraphInfo]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "ClearGraph",
                "args": [],
                "id": "ClearGraph[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "clearGraph",
                "args": null,
                "id": "LiveDashPanel_5[clearGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "DeleteFromServer",
                "args": [],
                "id": "DeleteFromServer[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "deleteFromServer",
                "args": null,
                "id": "LiveDashPanel_5[deleteFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "OpenFromFile",
                "args": [],
                "id": "OpenFromFile[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "openFromFile",
                "args": null,
                "id": "LiveDashPanel_5[openFromFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "OpenFromServer",
                "args": [],
                "id": "OpenFromServer[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "openFromServer",
                "args": null,
                "id": "LiveDashPanel_5[openFromServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "SaveToFile",
                "args": [],
                "id": "SaveToFile[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "saveToFile",
                "args": null,
                "id": "LiveDashPanel_5[saveToFile]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "SaveToServer",
                "args": [],
                "id": "SaveToServer[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "saveToServer",
                "args": null,
                "id": "LiveDashPanel_5[saveToServer]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "StartCalculatingGraph",
                "args": [],
                "id": "StartCalculatingGraph[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "startCalculatingGraph",
                "args": null,
                "id": "LiveDashPanel_5[startCalculatingGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "FitContent",
                "args": [],
                "id": "FitContent[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "fitContent",
                "args": null,
                "id": "LiveDashPanel_5[fitContent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "ZoomIn",
                "args": [],
                "id": "ZoomIn[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "zoomIn",
                "args": null,
                "id": "LiveDashPanel_5[zoomIn]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "ZoomOut",
                "args": [],
                "id": "ZoomOut[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "zoomOut",
                "args": null,
                "id": "LiveDashPanel_5[zoomOut]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "ZoomOriginal",
                "args": [],
                "id": "ZoomOriginal[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "zoomOriginal",
                "args": null,
                "id": "LiveDashPanel_5[zoomOriginal]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "CutItems",
                "args": [],
                "id": "CutItems[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "cutItems",
                "args": null,
                "id": "LiveDashPanel_5[cutItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "CopyItems",
                "args": [],
                "id": "CopyItems[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "copyItems",
                "args": null,
                "id": "LiveDashPanel_5[copyItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "PasteItems",
                "args": [],
                "id": "PasteItems[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "pasteItems",
                "args": null,
                "id": "LiveDashPanel_5[pasteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "DeleteItems",
                "args": [],
                "id": "DeleteItems[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "deleteItems",
                "args": null,
                "id": "LiveDashPanel_5[deleteItems]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "UndoGraph",
                "args": [],
                "id": "UndoGraph[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "undoGraph",
                "args": null,
                "id": "LiveDashPanel_5[undoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "RedoGraph",
                "args": [],
                "id": "RedoGraph[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "redoGraph",
                "args": null,
                "id": "LiveDashPanel_5[redoGraph]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "SetNewGraph",
                "args": [],
                "id": "SetNewGraph[LiveDashPanel_5]"
              },
              "action": {
                "guid": "LiveDashPanel_5",
                "name": "setNewGraphInfo",
                "args": null,
                "id": "LiveDashPanel_5[setNewGraphInfo]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceStatusUpdate",
                "args": [
                  {
                    "dataSource": "Measurements",
                    "status": "success"
                  }
                ],
                "id": "DataSourceStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_4",
                "name": "processDataSourceEvent",
                "args": null,
                "id": "Visualization_EditableTable_4[processDataSourceEvent]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceWriteStatusUpdate",
                "args": [
                  {
                    "dataSource": "Measurements",
                    "status": "failed"
                  }
                ],
                "id": "DataSourceWriteStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_4",
                "name": "processDataSourceWriteEvent",
                "args": null,
                "id": "Visualization_EditableTable_4[processDataSourceWriteEvent]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceStatusUpdate",
                "args": [
                  {
                    "dataSource": "test_makeresults",
                    "status": "success"
                  }
                ],
                "id": "DataSourceStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_1",
                "name": "processDataSourceEvent",
                "args": null,
                "id": "Visualization_EditableTable_1[processDataSourceEvent]"
              }
            },
            {
              "event": {
                "guid": "DataSourceSystem_0_5_0",
                "name": "DataSourceWriteStatusUpdate",
                "args": [
                  {
                    "dataSource": "test_makeresults",
                    "status": "failed"
                  }
                ],
                "id": "DataSourceWriteStatusUpdate[DataSourceSystem_0_5_0]"
              },
              "action": {
                "guid": "Visualization_EditableTable_1",
                "name": "processDataSourceWriteEvent",
                "args": null,
                "id": "Visualization_EditableTable_1[processDataSourceWriteEvent]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "BroadcastPrimitiveInfo",
                "args": [],
                "id": "BroadcastPrimitiveInfo[LiveDashPanel_2]"
              },
              "action": {
                "guid": "PrimitivePropertiesPanel_1",
                "name": "showPropertiesInPanel",
                "args": null,
                "id": "PrimitivePropertiesPanel_1[showPropertiesInPanel]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "BroadcastPrimitiveInfo",
                "args": [],
                "id": "BroadcastPrimitiveInfo[LiveDashPanel_3]"
              },
              "action": {
                "guid": "PrimitivePropertiesPanel_2",
                "name": "showPropertiesInPanel",
                "args": null,
                "id": "PrimitivePropertiesPanel_2[showPropertiesInPanel]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_3",
                "name": "GraphStructureUpdated",
                "args": [],
                "id": "GraphStructureUpdated[LiveDashPanel_3]"
              },
              "action": {
                "guid": "GraphStructurePanel_1",
                "name": "setGraphStructure",
                "args": null,
                "id": "GraphStructurePanel_1[setGraphStructure]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_1",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_1]"
              },
              "action": {
                "guid": "PrimitiveLibraryPanel_2",
                "name": "getPluginConfig",
                "args": null,
                "id": "PrimitiveLibraryPanel_2[getPluginConfig]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_2",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_2]"
              },
              "action": {
                "name": "Solver",
                "args": null,
                "id": "undefined[Solver]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_1",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_1]"
              },
              "action": {
                "name": "Switch to WhatIf",
                "args": null,
                "id": "undefined[Switch to WhatIf]"
              }
            },
            {
              "event": {
                "guid": "WorkspaceSystem_0_15_0",
                "name": "WorkspaceTabSelected",
                "args": [],
                "id": "WorkspaceTabSelected[WorkspaceSystem_0_15_0]"
              },
              "action": {
                "name": "_event_logger",
                "args": null,
                "id": "undefined[_event_logger]"
              }
            },
            {
              "event": {
                "guid": "Visualization_EditableTable_1",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[Visualization_EditableTable_1]"
              },
              "action": {
                "name": "_event_logger",
                "args": null,
                "id": "undefined[_event_logger]"
              }
            },
            {
              "event": {
                "guid": "WorkspaceSystem_0_15_0",
                "name": "WorkspaceTabClicked",
                "args": [],
                "id": "WorkspaceTabClicked[WorkspaceSystem_0_15_0]"
              },
              "action": {
                "name": "Measure tab on load",
                "args": null,
                "id": "undefined[Measure tab on load]"
              }
            },
            {
              "event": {
                "guid": "WorkspaceSystem_0_15_0",
                "name": "WorkspaceTabClicked",
                "args": [],
                "id": "WorkspaceTabClicked[WorkspaceSystem_0_15_0]"
              },
              "action": {
                "name": "_event_logger",
                "args": null,
                "id": "undefined[_event_logger]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_3",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_3]"
              },
              "action": {
                "name": "Apply a measure",
                "args": null,
                "id": "undefined[Apply a measure]"
              }
            },
            {
              "event": {
                "guid": "Visualization_EditableTable_1",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[Visualization_EditableTable_1]"
              },
              "action": {
                "name": "Load history",
                "args": null,
                "id": "undefined[Load history]"
              }
            },
            {
              "event": {
                "guid": "GraphStructurePanel_1",
                "name": "StructNodeClicked",
                "args": [],
                "id": "StructNodeClicked[GraphStructurePanel_1]"
              },
              "action": {
                "guid": "LiveDashPanel_3",
                "name": "selectNodeById",
                "args": null,
                "id": "LiveDashPanel_3[selectNodeById]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_2",
                "name": "GraphStructureUpdated",
                "args": [],
                "id": "GraphStructureUpdated[LiveDashPanel_2]"
              },
              "action": {
                "guid": "GraphStructurePanel_2",
                "name": "setGraphStructure",
                "args": null,
                "id": "GraphStructurePanel_2[setGraphStructure]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_4",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_4]"
              },
              "action": {
                "name": "Monitoring refresh",
                "args": null,
                "id": "undefined[Monitoring refresh]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_5",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_5]"
              },
              "action": {
                "name": "PPD Monitoring refresh",
                "args": null,
                "id": "undefined[PPD Monitoring refresh]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_6",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_6]"
              },
              "action": {
                "name": "PPD Switch to WhatIf",
                "args": null,
                "id": "undefined[PPD Switch to WhatIf]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "GraphStructureUpdated",
                "args": [],
                "id": "GraphStructureUpdated[LiveDashPanel_4]"
              },
              "action": {
                "guid": "GraphStructurePanel_3",
                "name": "setGraphStructure",
                "args": null,
                "id": "GraphStructurePanel_3[setGraphStructure]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_4",
                "name": "BroadcastPrimitiveInfo",
                "args": [],
                "id": "BroadcastPrimitiveInfo[LiveDashPanel_4]"
              },
              "action": {
                "guid": "PrimitivePropertiesPanel_5",
                "name": "showPropertiesInPanel",
                "args": null,
                "id": "PrimitivePropertiesPanel_5[showPropertiesInPanel]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "BroadcastPrimitiveInfo",
                "args": [],
                "id": "BroadcastPrimitiveInfo[LiveDashPanel_5]"
              },
              "action": {
                "guid": "PrimitivePropertiesPanel_6",
                "name": "showPropertiesInPanel",
                "args": null,
                "id": "PrimitivePropertiesPanel_6[showPropertiesInPanel]"
              }
            },
            {
              "event": {
                "guid": "LiveDashPanel_5",
                "name": "GraphStructureUpdated",
                "args": [],
                "id": "GraphStructureUpdated[LiveDashPanel_5]"
              },
              "action": {
                "guid": "GraphStructurePanel_4",
                "name": "setGraphStructure",
                "args": null,
                "id": "GraphStructurePanel_4[setGraphStructure]"
              }
            },
            {
              "event": {
                "guid": "GraphStructurePanel_3",
                "name": "StructNodeClicked",
                "args": [],
                "id": "StructNodeClicked[GraphStructurePanel_3]"
              },
              "action": {
                "name": "PPD select node 1",
                "args": null,
                "id": "undefined[PPD select node 1]"
              }
            },
            {
              "event": {
                "guid": "GraphStructurePanel_4",
                "name": "StructNodeClicked",
                "args": [],
                "id": "StructNodeClicked[GraphStructurePanel_4]"
              },
              "action": {
                "name": "PPD select node 2",
                "args": null,
                "id": "undefined[PPD select node 2]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_7",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_7]"
              },
              "action": {
                "name": "PPD Solver",
                "args": null,
                "id": "undefined[PPD Solver]"
              }
            },
            {
              "event": {
                "guid": "ButtonPanel_8",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[ButtonPanel_8]"
              },
              "action": {
                "name": "PPD Apply a measure",
                "args": null,
                "id": "undefined[PPD Apply a measure]"
              }
            },
            {
              "event": {
                "guid": "Visualization_EditableTable_3",
                "name": "Clicked",
                "args": [],
                "id": "Clicked[Visualization_EditableTable_3]"
              },
              "action": {
                "name": "PPD Load history",
                "args": null,
                "id": "undefined[PPD Load history]"
              }
            },
            {
              "event": {
                "guid": "GraphStructurePanel_2",
                "name": "StructNodeClicked",
                "args": [],
                "id": "StructNodeClicked[GraphStructurePanel_2]"
              },
              "action": {
                "guid": "LiveDashPanel_2",
                "name": "selectNodeById",
                "args": null,
                "id": "LiveDashPanel_2[selectNodeById]"
              }
            }
          ],
          "actions": [
            {
              "name": "Solver",
              "args": null,
              "id": "undefined[Solver]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Solver\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\nlet dataSourceSystem = Application.autocomplete.DataSourceSystem\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nnotificationSystem.create(customActionTitle, \"Ожидайте окончания расчетов\", notificationSettingsInfo)\n\nawait liveDashPanelWhatIf.saveToServer({name: liveDashPanelWhatIf.graphMeta.graphName, id: liveDashPanelWhatIf.graphMeta.graphID})\n\nlet solverOtl = `v2 | dtcd_read_graph \"${liveDashPanelWhatIf.graphMeta.graphName}\" | ks_prepare | ks_calc_df`\nawait dataSourceSystem.oneShotRun(\"otl\", {cache_ttl: 5, queryString: solverOtl})\n    .then(ds => {\n\n        function processNode(node, line, usage) {\n            const nodeParamsMapping = {\n                \"start\": {\n                    \"res_P\": \"startP\",\n                    \"res_T\": \"startT\",\n                    \"res_Q_m3_day\": \"start_Q_m3_day\"\n                },\n                \"end\": {\n                    \"res_P\": \"endP\",\n                    \"res_T\": \"endT\",\n                    \"res_Q_m3_day\": \"end_Q_m3_day\"\n                },\n                \"edge\": {\n                    \"res_watercut_percent\": \"res_watercut_percent\",// Обводненность,TRUE\n                    \"res_liquid_density_kg_m3\": \"res_liquid_density_kg_m3\",// Плотность жидкости,\n                    \"res_pump_power_watt\": \"res_pump_power_watt\",// Мощность насоса,TRUE\n                    \"res_mass_flow_kg_sec\": \"X_kg_sec\",// Массовый поток,\n                    \"res_velocity_m_sec\": \"velocity_m_sec\"// Скорость потока,TRUE\n                }\n            };\n            let props = node.tag.properties;\n\n            if (\"junctionpoint\" === props.object_type.value){\n                return\n            }\n            console.log(\"eval \", usage, node.tag.primitiveID, props, line);\n            if (\n              \"start\" === usage ||\n              \"edge\" === usage ||\n              \"end\" === usage){\n                Object.entries(nodeParamsMapping[usage]).map(\n                  ([param,df]) => {\n                      console.log(param) \n                      props[param].expression = line[df];\n                  })\n            }\n        }\n\n        function findNode(propertyWithID, columnWithID, line) {\n            let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n                if (propertyWithID in node.tag.properties) {\n                    return Number(node.tag.properties[propertyWithID].expression) === Number(line[columnWithID])\n                } else {\n                    return false\n                }\n            })\n            console.log(node)\n            return node\n        }\n\n        function processDfLine(line) {\n            let sourceNode = findNode(\"node_id\", \"node_id_start\", line)\n            if (null != sourceNode){\n                processNode(sourceNode, line, \"start\");\n            }\n            let targetNode = findNode(\"node_id\", \"node_id_end\", line)\n            if (null != targetNode){\n                processNode(targetNode, line, \"end\");\n            }\n\n            let edgeNode = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n                if (\n                  'node_id_start' in node.tag.properties &&\n                  'node_id_end' in node.tag.properties) {\n                    return Number(line.node_id_start) === Number(node.tag.properties.node_id_start.expression) &&\n                      Number(line.node_id_end) === Number(node.tag.properties.node_id_end.expression)\n                } else {\n                    return false;\n                }\n            });\n            if (null != edgeNode){\n                // console.log(\"process edgeNode\", edgeNode);\n                processNode(edgeNode, line, \"edge\");\n            }\n        };\n\n        Object.entries(ds).map(([id, line]) => {\n            processDfLine(line);\n        })\n\n        return true\n})\n    .then(t => {\n        liveDashPanelWhatIf.startCalculatingGraph()\n        notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n    })\n//    .catch((e)=>{\n//        console.log(\"Solver flow failed\")\n//        console.log(e)\n//        notificationSystem.create(customActionTitle, \"Что-то пошло не так\", notificationSettingsFail)})\n\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            },
            {
              "name": "Switch to WhatIf",
              "args": null,
              "id": "undefined[Switch to WhatIf]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Switch to WhatIf\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\n\nlet tabMonitoring = \"wss-tab-5720\"\nlet tabWhatIf = \"wss-tab-9078\"\n\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nlet interactionSystem = Application.autocomplete.InteractionSystem\n\nnotificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\nlet usernamePromise = interactionSystem.GETRequest(\"/dtcd_utils/v1/user?username\").then(d => {return d.data.username})\n\nlet removeNodes = []\nfor (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    removeNodes.push(node)\n}\nfor (let rn of removeNodes) {\n    liveDashPanelMonitoring.masterGraph.remove(rn)\n}\n\nfor (const node_id in liveDashPanelMonitoring.nodes) {\n    let node = liveDashPanelMonitoring.nodes[node_id]\n    if (node_id.includes(\"DataLakeNode\")) {\n        delete node\n    } else {\n        for (const prop in node.tag.properties) {\n            if (typeof(node.tag.properties[prop].expression) === \"string\" && node.tag.properties[prop].expression !== \"\") {\n                node.tag.properties[prop].expression = JSON.stringify(node.tag.properties[prop].value)\n            } else {\n                node.tag.properties[prop].expression = node.tag.properties[prop].value\n            }\n        }\n    }\n}\nlet username = await usernamePromise\n\nlet tmpGraphName = `${liveDashPanelMonitoring.graphMeta.graphName}_tmp_${username}`\n\nawait interactionSystem.get(\"/supergraph/v1/fragments\").then(d => {\n    console.log(d)\n    let oldTmpFragments = d.data.fragments.filter(fr => {\n        return fr.name === tmpGraphName\n    })\n    for (let otf in oldTmpFragments) {\n        console.log(oldTmpFragments[otf])\n        interactionSystem.DELETERequest(`/supergraph/v1/fragments/${oldTmpFragments[otf].id}`)\n    }\n})\n\nawait liveDashPanelMonitoring.saveAs({\"name\": tmpGraphName}).then( fragment => {\n    console.log(fragment)\n    liveDashPanelWhatIf.openFromServer(fragment)\n    let fr = {\"id\": liveDashPanelMonitoring.graphMeta.graphID, \"name\": liveDashPanelMonitoring.graphMeta.graphName}\n    console.log(fr)\n    liveDashPanelMonitoring.openFromServer(fr)\n    workspaceSystem.setActiveTab(tabWhatIf)\n    }\n)\nnotificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            },
            {
              "name": "_event_logger",
              "args": null,
              "id": "undefined[_event_logger]",
              "callback": "async function anonymous(e\n) {\nconsole.log(e)\n}"
            },
            {
              "name": "Measure tab on load",
              "args": null,
              "id": "undefined[Measure tab on load]",
              "callback": "async function anonymous(e\n) {\nif (e.id === \"wss-tab-1947\") {\n    let customActionTitle = \"Measure tab on load\"\n    console.log(`Custom action \"${customActionTitle}\" started`)\n    let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\n    let tableExp = Application.autocomplete.Visualization_EditableTable_1\n    let storageSystem = Application.autocomplete.StorageSystem\n    let notificationSystem = Application.autocomplete.NotificationSystem\n    let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n    let notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\n    let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n    function getLongTableFromGraph(targetLiveDash) {\n        let table = [];\n        for (let node of liveDashPanelWhatIf.masterGraph.nodes) {\n            let primitiveID = node.tag.primitiveID\n            let nodeName = node.tag.properties.Name.value\n\n            for (let prop in node.tag.properties) {\n                if (prop === \"Name\") {\n                    continue\n                }\n                let line = {\n                    \"primitiveID\": primitiveID,\n                    \"nodeName\": nodeName,\n                    \"nodeProperty\": prop,\n                    \"monitoring\": node.tag.properties[prop].value,\n                }\n                table.push(line)\n            }\n        }\n        return table\n    }\n\n    let expTable = storageSystem.session.getRecord(\"expTable\")\n    let finalTable\n    console.log(expTable)\n    if (expTable && expTable.length !== 0) {\n        finalTable = expTable\n    } else {\n        finalTable = getLongTableFromGraph(liveDashPanelWhatIf)\n        storageSystem.session.putRecord(\"expTable\", finalTable)\n    }\n    console.log(finalTable)\n    if (finalTable.length === 0) {\n        notificationSystem.create(customActionTitle, \"Проверьте граф на What-If вкладке\", notificationSettingsFail)\n    } else {\n        notificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n        await new Promise(r => setTimeout(r, 2000))\n        tableExp.loadSchema(finalTable[0])\n        tableExp.loadData(finalTable)\n        notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n    }\n    console.log(`Custom action \"${customActionTitle}\" finished`)\n}\nif (e.id === \"wss-tab-5058\") {\n    let customActionTitle = \"Measure tab on load\"\n    console.log(`Custom action \"${customActionTitle}\" started`)\n    let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\n    let tableExp = Application.autocomplete.Visualization_EditableTable_3\n    let storageSystem = Application.autocomplete.StorageSystem\n    let notificationSystem = Application.autocomplete.NotificationSystem\n    let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n    let notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\n    let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n    function getLongTableFromGraph(targetLiveDash) {\n        let table = [];\n        for (let node of liveDashPanelWhatIf.masterGraph.nodes) {\n            let primitiveID = node.tag.primitiveID\n            let nodeName = node.tag.properties.Name.value\n\n            for (let prop in node.tag.properties) {\n                if (prop === \"Name\") {\n                    continue\n                }\n                let line = {\n                    \"primitiveID\": primitiveID,\n                    \"nodeName\": nodeName,\n                    \"nodeProperty\": prop,\n                    \"monitoring\": node.tag.properties[prop].value,\n                }\n                table.push(line)\n            }\n        }\n        return table\n    }\n\n    let expTable = storageSystem.session.getRecord(\"expTablePPD\")\n    let finalTable\n    console.log(expTable)\n    if (expTable && expTable.length !== 0) {\n        finalTable = expTable\n    } else {\n        finalTable = getLongTableFromGraph(liveDashPanelWhatIf)\n        storageSystem.session.putRecord(\"expTablePPD\", finalTable)\n    }\n    console.log(finalTable)\n    if (finalTable.length === 0) {\n        notificationSystem.create(customActionTitle, \"Проверьте граф на What-If вкладке\", notificationSettingsFail)\n    } else {\n        notificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n        await new Promise(r => setTimeout(r, 2000))\n        tableExp.loadSchema(finalTable[0])\n        tableExp.loadData(finalTable)\n        notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n    }\n    console.log(`Custom action \"${customActionTitle}\" finished`)\n}\n}"
            },
            {
              "name": "Apply a measure",
              "args": null,
              "id": "undefined[Apply a measure]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Apply a measure\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\nlet tableExp = Application.autocomplete.Visualization_EditableTable_1\nlet tableMeasures = Application.autocomplete.Visualization_EditableTable_2\nlet storageSystem = Application.autocomplete.StorageSystem\n\nlet tabMonitoring = \"wss-tab-5720\"\nlet tabWhatIf = \"wss-tab-9078\"\nlet measures_boolean_column = \"to_do\"\n\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nlet interactionSystem = Application.autocomplete.InteractionSystem\n\nnotificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\nfunction getLongTableFromGraph(targetLiveDash) {\n    let table = [];\n    for (let node of liveDashPanelWhatIf.masterGraph.nodes) {\n        let primitiveID = node.tag.primitiveID\n        let nodeName = node.tag.properties.Name.value\n\n        for (let prop in node.tag.properties) {\n            if (prop === \"Name\") {\n                continue\n            }\n            let line = {\n                \"primitiveID\": primitiveID,\n                \"nodeName\": nodeName,\n                \"nodeProperty\": prop,\n                \"value\": node.tag.properties[prop].value,\n            }\n            table.push(line)\n        }\n    }\n    return table\n}\n\nfunction fill(node, properties, line) {\n    console.log(node, properties)\n    for (let property of properties) {\n        if (property in node.tag.properties) {\n            node.tag.properties[property].expression = line[property]\n            node.tag.properties[property].value = line[property]\n            node.tag.properties[property].status = \"complete\"\n            console.log(node.tag.properties[property])\n        } else {\n            console.log(`Node ${node.tag.primitiveID} doesn't have a property \"${property}\"`)\n        }\n    }\n}\n\nfunction findNode(propertyWithID, columnWithID, line) {\n    let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n            return Number(node.tag.properties[propertyWithID].expression) === Number(line[columnWithID])\n        } else {\n            return false\n        }\n    })\n    console.log(node)\n    return node\n}\n\nlet measuresDataset = tableMeasures.getDatasetFromTable().filter(lineFromMeasures  => {return lineFromMeasures[measures_boolean_column]})\nconsole.log(measuresDataset)\n\nfor (let i in measuresDataset) {\n    let line = measuresDataset[i]\n    console.log(line)\n    if (\"node_id\" in line && line.node_id !== null && line.node_id !== \"undefined\") {\n        let node = findNode(\"node_id\", \"node_id\", line)\n        if (node === null) {\n            console.log(`Node ${line.node_id} from dataset is not presented in the graph`)\n        } else {\n            // fill(node, wellProperties, line)\n            fill(node, Object.keys(line), line)\n        }\n    } else {\n        let node = findNode(\"node_id_start\", \"node_id_start\", line)\n        if (node === null) {\n            console.log(`Node ${line.node_id_start} (else section) from dataset is not presented in the graph`)\n        } else {\n            // fill(node, pipeProperties, line)\n            fill(node, Object.keys(line), line)\n        }\n    }\n}\n\nlet tableExperiments = tableExp.getDatasetFromTable()\n\nawait Application.autocomplete.EventSystem.actions.find(ac => {return ac.name === \"Solver\"}).callback()\n\nlet tableFromWhatIf = getLongTableFromGraph(liveDashPanelWhatIf)\n\nlet experiments = storageSystem.session.getRecord(\"experiments\")\nif (experiments && experiments.length !==0) {\n    experiments.push(tableFromWhatIf)\n} else {\n    experiments = [tableFromWhatIf]\n}\nstorageSystem.session.putRecord(\"experiments\", experiments)\n\nlet updatedTable = []\n\nfor (let lineFromTable in tableExperiments) {\n    console.log(\"---\")\n    console.log(tableExperiments[lineFromTable])\n    let lineFromCurrentExperiment = tableFromWhatIf.find(l => {return l.nodeName === tableExperiments[lineFromTable].nodeName && l.nodeProperty === tableExperiments[lineFromTable].nodeProperty})\n    console.log(lineFromCurrentExperiment)\n    let updatedLine = tableExperiments[lineFromTable]\n    updatedLine[`Experiment ${experiments.length}`] = lineFromCurrentExperiment.value\n    console.log(updatedLine)\n    updatedTable.push(updatedLine)\n}\n\ntableExp.loadSchema(updatedTable[0])\ntableExp.loadData(updatedTable)\nstorageSystem.session.putRecord(\"expTable\", updatedTable)\n}"
            },
            {
              "name": "Load history",
              "args": null,
              "id": "undefined[Load history]",
              "callback": "async function anonymous(e\n) {\nlet customActionTitle = \"Load history\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\nlet storageSystem = Application.autocomplete.StorageSystem\n\nfunction findNode(propertyWithID, columnWithID, line) {\n    console.log(propertyWithID, columnWithID, line)\n    let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n            return node.tag.properties[propertyWithID].value === line[columnWithID]\n        } else {\n            return false\n        }\n    })\n    console.log(node)\n    return node\n}\n\nlet eventColumn = e.column\nif (eventColumn.includes(\"Experiment\")) {\n    let experimentNumber = eventColumn.split(\" \")[1]\n\n    let experiments = storageSystem.session.getRecord(\"experiments\")\n    let experiment = experiments[experimentNumber - 1]\n\n    for (let i in experiment) {\n        let line = experiment[i]\n        console.log(line)\n        let targetNode = findNode(\"Name\", \"nodeName\", line)\n        targetNode[line.nodeProperty] = line.value\n    }\n    console.log(\"Graph was loaded\")\n} else {\n    console.log(\"Not experiment column was clicked\")\n}\n\n\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            },
            {
              "name": "Monitoring refresh",
              "args": null,
              "id": "undefined[Monitoring refresh]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Monitoring refresh\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\nlet dataSourceSystem = Application.autocomplete.DataSourceSystem\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nasync function copyMonitoringGraphForSolver() {\n  let customActionTitle = \"function copyMonitoringGraphForSolver\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  let workspaceSystem = Application.autocomplete.WorkspaceSystem\n  let liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\n  let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\n\n  let tabMonitoring = \"wss-tab-5720\"\n  let tabWhatIf = \"wss-tab-9078\"\n\n  let notificationSystem = Application.autocomplete.NotificationSystem\n  let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n  let notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\n  let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n  let interactionSystem = Application.autocomplete.InteractionSystem\n\n  notificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\n  let usernamePromise = interactionSystem.GETRequest(\"/dtcd_utils/v1/user?username\").then(d => {return d.data.username})\n\n  let removeNodes = []\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    removeNodes.push(node)\n  }\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return \"_remove_before_solver\" in node.tag.properties})) {\n    removeNodes.push(node)\n  }\n  for (let rn of removeNodes) {\n    liveDashPanelMonitoring.masterGraph.remove(rn)\n  }\n\n  for (const node_id in liveDashPanelMonitoring.nodes) {\n    let node = liveDashPanelMonitoring.nodes[node_id]\n    if (node_id.includes(\"DataLakeNode\")) {\n      delete node\n    } else {\n      for (const prop in node.tag.properties) {\n        if (typeof(node.tag.properties[prop].expression) === \"string\" && node.tag.properties[prop].expression !== \"\") {\n          node.tag.properties[prop].expression = JSON.stringify(node.tag.properties[prop].value)\n        } else {\n          node.tag.properties[prop].expression = node.tag.properties[prop].value\n        }\n      }\n    }\n  }\n  let username = await usernamePromise\n\n  let tmpGraphName = `${liveDashPanelMonitoring.graphMeta.graphName}_monitoring_${username}`\n\n  await interactionSystem.get(\"/supergraph/v1/fragments\").then(d => {\n    console.log(d)\n    let oldTmpFragments = d.data.fragments.filter(fr => {\n      return fr.name === tmpGraphName\n    })\n    for (let otf in oldTmpFragments) {\n      console.log(oldTmpFragments[otf])\n      interactionSystem.DELETERequest(`/supergraph/v1/fragments/${oldTmpFragments[otf].id}`)\n    }\n  })\n\n  await liveDashPanelMonitoring.saveAs({\"name\": tmpGraphName}).then( fragment => {\n      console.log(fragment)\n      let fr = {\"id\": liveDashPanelMonitoring.graphMeta.graphID, \"name\": liveDashPanelMonitoring.graphMeta.graphName}\n      console.log(fr)\n      liveDashPanelMonitoring.openFromServer(fr)\n    }\n  )\n  notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n  return tmpGraphName\n}\nasync function runSolver(tmpGraphName) {\n  let customActionTitle = \"Solver\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  let workspaceSystem = Application.autocomplete.WorkspaceSystem\n  let liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_2\n  let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_3\n  let dataSourceSystem = Application.autocomplete.DataSourceSystem\n  let notificationSystem = Application.autocomplete.NotificationSystem\n  let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n  let notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\n  let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n  notificationSystem.create(customActionTitle, \"Ожидайте окончания расчетов\", notificationSettingsInfo)\n  let solverOtl = `v2 | dtcd_read_graph \"${tmpGraphName}\" | ks_prepare | ks_calc_df`\n\n  await dataSourceSystem.oneShotRun(\"otl\", {cache_ttl: 5, queryString: solverOtl})\n  .then(ds => {\n\n    function processNode(node, line, usage) {\n      const nodeParamsMapping = {\n                \"start\": {\n                    \"res_P\": \"startP\",\n                    \"res_T\": \"startT\",\n                    \"res_Q_m3_day\": \"start_Q_m3_day\"\n                },\n                \"end\": {\n                    \"res_P\": \"endP\",\n                    \"res_T\": \"endT\",\n                    \"res_Q_m3_day\": \"end_Q_m3_day\"\n                },\n                \"edge\": {\n                    \"res_watercut_percent\": \"res_watercut_percent\",// Обводненность,TRUE\n                    \"res_liquid_density_kg_m3\": \"res_liquid_density_kg_m3\",// Плотность жидкости,\n                    \"res_pump_power_watt\": \"res_pump_power_watt\",// Мощность насоса,TRUE\n                    \"res_mass_flow_kg_sec\": \"X_kg_sec\",// Массовый поток,\n                    \"res_velocity_m_sec\": \"velocity_m_sec\"// Скорость потока,TRUE\n                }\n      };\n      let props = node.tag.properties;\n\n      if (\"junctionpoint\" === props.object_type.value){\n        return\n      }\n      console.log(\"eval \", usage, node.tag.primitiveID, props, line);\n      if (\n        \"start\" === usage ||\n        \"edge\" === usage ||\n        \"end\" === usage){\n        Object.entries(nodeParamsMapping[usage]).map(\n          ([param,df]) => {\n            props[param].expression = line[df];\n          })\n      }\n    }\n\n    function findNode(propertyWithID, columnWithID, line) {\n      let node = liveDashPanelMonitoring.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n          return Number(node.tag.properties[propertyWithID].value) === Number(line[columnWithID])\n        } else {\n          return false\n        }\n      })\n      console.log(node)\n      return node\n    }\n\n    function processDfLine(line) {\n      let sourceNode = findNode(\"node_id\", \"node_id_start\", line)\n      if (null != sourceNode){\n        processNode(sourceNode, line, \"start\");\n      }\n      let targetNode = findNode(\"node_id\", \"node_id_end\", line)\n      if (null != targetNode){\n        processNode(targetNode, line, \"end\");\n      }\n\n      let edgeNode = liveDashPanelMonitoring.masterGraph.nodes.find(node => {\n        if (\n          'node_id_start' in node.tag.properties &&\n          'node_id_end' in node.tag.properties) {\n          return Number(line.node_id_start) === Number(node.tag.properties.node_id_start.value) &&\n            Number(line.node_id_end) === Number(node.tag.properties.node_id_end.value)\n        } else {\n          return false;\n        }\n      });\n      if (null != edgeNode){\n        // console.log(\"process edgeNode\", edgeNode);\n        processNode(edgeNode, line, \"edge\");\n      }\n    };\n\n    Object.entries(ds).map(([id, line]) => {\n      processDfLine(line);\n    })\n\n    return true\n  })\n  .then(t => {\n    liveDashPanelMonitoring.startCalculatingGraph()\n    notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n  })\n  .catch(()=>{\n    console.log(\"Solver flow failed\")\n    notificationSystem.create(customActionTitle, \"Что-то пошло не так\", notificationSettingsFail)})\n\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n}\n\nasync function startCalculation() {\n  let customActionTitle = \"function startCalculation\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  liveDashPanelMonitoring.startCalculatingGraph()\n  let dataLakeNodes = []\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    dataLakeNodes.push(node)\n  }\n  var completeCount = 0\n\n  while (completeCount != dataLakeNodes.length) {\n    for (let node of dataLakeNodes) {\n      if (node.tag.properties.query.status === \"complete\") {\n        completeCount += 1\n      }\n    }\n    await new Promise(r => setTimeout(r, 1000))\n  }\n\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n}\n\nawait startCalculation()\nlet tmpGraphName = await copyMonitoringGraphForSolver()\nawait runSolver(tmpGraphName)\n}"
            },
            {
              "name": "PPD Monitoring refresh",
              "args": null,
              "id": "undefined[PPD Monitoring refresh]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Monitoring refresh\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\nlet dataSourceSystem = Application.autocomplete.DataSourceSystem\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nasync function copyMonitoringGraphForSolver() {\n  let customActionTitle = \"function copyMonitoringGraphForSolver\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  let workspaceSystem = Application.autocomplete.WorkspaceSystem\n  let liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\n  let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\n\n  let tabMonitoring = \"wss-tab-5720\"\n  let tabWhatIf = \"wss-tab-9078\"\n\n  let notificationSystem = Application.autocomplete.NotificationSystem\n  let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n  let notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\n  let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n  let interactionSystem = Application.autocomplete.InteractionSystem\n\n  notificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\n  let usernamePromise = interactionSystem.GETRequest(\"/dtcd_utils/v1/user?username\").then(d => {return d.data.username})\n\n  let removeNodes = []\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    removeNodes.push(node)\n  }\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return \"_remove_before_solver\" in node.tag.properties})) {\n    removeNodes.push(node)\n  }\n  for (let rn of removeNodes) {\n    liveDashPanelMonitoring.masterGraph.remove(rn)\n  }\n\n  for (const node_id in liveDashPanelMonitoring.nodes) {\n    let node = liveDashPanelMonitoring.nodes[node_id]\n    if (node_id.includes(\"DataLakeNode\")) {\n      delete node\n    } else {\n      for (const prop in node.tag.properties) {\n        if (typeof(node.tag.properties[prop].expression) === \"string\" && node.tag.properties[prop].expression !== \"\") {\n          node.tag.properties[prop].expression = JSON.stringify(node.tag.properties[prop].value)\n        } else {\n          node.tag.properties[prop].expression = node.tag.properties[prop].value\n        }\n      }\n    }\n  }\n  let username = await usernamePromise\n\n  let tmpGraphName = `${liveDashPanelMonitoring.graphMeta.graphName}_monitoring_${username}`\n\n  await interactionSystem.get(\"/supergraph/v1/fragments\").then(d => {\n    console.log(d)\n    let oldTmpFragments = d.data.fragments.filter(fr => {\n      return fr.name === tmpGraphName\n    })\n    for (let otf in oldTmpFragments) {\n      console.log(oldTmpFragments[otf])\n      interactionSystem.DELETERequest(`/supergraph/v1/fragments/${oldTmpFragments[otf].id}`)\n    }\n  })\n\n  await liveDashPanelMonitoring.saveAs({\"name\": tmpGraphName}).then( fragment => {\n      console.log(fragment)\n      let fr = {\"id\": liveDashPanelMonitoring.graphMeta.graphID, \"name\": liveDashPanelMonitoring.graphMeta.graphName}\n      console.log(fr)\n      liveDashPanelMonitoring.openFromServer(fr)\n    }\n  )\n  notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n  return tmpGraphName\n}\nasync function runSolver(tmpGraphName) {\n  let customActionTitle = \"Solver\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  let workspaceSystem = Application.autocomplete.WorkspaceSystem\n  let liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\n  let liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\n  let dataSourceSystem = Application.autocomplete.DataSourceSystem\n  let notificationSystem = Application.autocomplete.NotificationSystem\n  let notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\n  let notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\n  let notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\n  notificationSystem.create(customActionTitle, \"Ожидайте окончания расчетов\", notificationSettingsInfo)\n  let notificationSettingsWarning = {type: \"warning\", floatTime: 5, floatMode: true}\n  if (!liveDashPanelWhatIf.masterGraph.nodes.toArray().find(node=>{return node.tag.primitiveID===\"oil_kns_61\"}).tag.properties._check.value) {\n    notificationSystem.create(customActionTitle, \"Cумма всех закачек скважин не равна входящей\", notificationSettingsWarning)}\n\n\n  let solverOtl = `v2 | dtcd_read_graph \"${tmpGraphName}\" | ks_prepare | ks_calc_df network_kind=water`\n\n  await dataSourceSystem.oneShotRun(\"otl\", {cache_ttl: 5, queryString: solverOtl})\n  .then(ds => {\n\n    function processNode(node, line, usage) {\n      const nodeParamsMapping = {\n            \"start\": {\n                \"res_P\": \"startP\",\n                \"res_T\": \"startT\",\n                \"res_Q_m3_day\": \"start_Q_m3_day\"\n            },\n            \"end\": {\n                \"res_P\": \"endP\",\n                \"res_T\": \"endT\",\n                \"res_Q_m3_day\": \"end_Q_m3_day\"\n            },\n            \"edge\": {\n                \"res_watercut_percent\": \"res_watercut_percent\",// Обводненность,TRUE\n                \"res_liquid_density_kg_m3\": \"res_liquid_density_kg_m3\",// Плотность жидкости,\n                \"res_pump_power_watt\": \"res_pump_power_watt\",// Мощность насоса,TRUE\n                \"res_mass_flow_kg_sec\": \"X_kg_sec\",// Массовый поток,\n                \"res_velocity_m_sec\": \"velocity_m_sec\"// Скорость потока,TRUE\n            }\n      };\n      let props = node.tag.properties;\n\n      if (\"junctionpoint\" === props.object_type.value){\n        return\n      }\n      console.log(\"eval \", usage, node.tag.primitiveID, props, line);\n      if (\n        \"start\" === usage ||\n        \"edge\" === usage ||\n        \"end\" === usage){\n        Object.entries(nodeParamsMapping[usage]).map(\n          ([param,df]) => {\n            props[param].expression = line[df];\n          })\n      }\n    }\n\n    function findNode(propertyWithID, columnWithID, line) {\n      let node = liveDashPanelMonitoring.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n          return String(node.tag.properties[propertyWithID].value) === String(line[columnWithID])\n        } else {\n          return false\n        }\n      })\n      console.log(node)\n      return node\n    }\n\n    function processDfLine(line) {\n      let sourceNode = findNode(\"node_id\", \"node_id_start\", line)\n      if (null != sourceNode){\n        processNode(sourceNode, line, \"start\");\n      }\n      let targetNode = findNode(\"node_id\", \"node_id_end\", line)\n      if (null != targetNode){\n        processNode(targetNode, line, \"end\");\n      }\n\n      let edgeNode = liveDashPanelMonitoring.masterGraph.nodes.find(node => {\n        if (\n          'node_id_start' in node.tag.properties &&\n          'node_id_end' in node.tag.properties) {\n          return Number(line.node_id_start) === Number(node.tag.properties.node_id_start.value) &&\n            Number(line.node_id_end) === Number(node.tag.properties.node_id_end.value)\n        } else {\n          return false;\n        }\n      });\n      if (null != edgeNode){\n        // console.log(\"process edgeNode\", edgeNode);\n        processNode(edgeNode, line, \"edge\");\n      }\n    };\n\n    Object.entries(ds).map(([id, line]) => {\n      processDfLine(line);\n    })\n\n    return true\n  })\n  .then(t => {\n    liveDashPanelMonitoring.startCalculatingGraph()\n    notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n  })\n  .catch(()=>{\n    console.log(\"Solver flow failed\")\n    notificationSystem.create(customActionTitle, \"Что-то пошло не так\", notificationSettingsFail)})\n\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n}\n\nasync function startCalculation() {\n  let customActionTitle = \"function startCalculation\"\n  console.log(`Custom action \"${customActionTitle}\" started`)\n  liveDashPanelMonitoring.startCalculatingGraph()\n  let dataLakeNodes = []\n  for (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    dataLakeNodes.push(node)\n  }\n  var completeCount = 0\n\n  while (completeCount != dataLakeNodes.length) {\n    for (let node of dataLakeNodes) {\n      if (node.tag.properties.query.status === \"complete\") {\n        completeCount += 1\n      }\n    }\n    await new Promise(r => setTimeout(r, 1000))\n  }\n\n  console.log(`Custom action \"${customActionTitle}\" finished`)\n}\n\nawait startCalculation()\nlet tmpGraphName = await copyMonitoringGraphForSolver()\nawait runSolver(tmpGraphName)\n}"
            },
            {
              "name": "PPD Switch to WhatIf",
              "args": null,
              "id": "undefined[PPD Switch to WhatIf]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Switch to WhatIf\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\n\nlet tabMonitoring = \"wss-tab-5465\"\nlet tabWhatIf = \"wss-tab-9479\"\n\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"fail\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nlet interactionSystem = Application.autocomplete.InteractionSystem\n\nnotificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\nlet usernamePromise = interactionSystem.GETRequest(\"/dtcd_utils/v1/user?username\").then(d => {return d.data.username})\n\nlet removeNodes = []\nfor (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return node.tag.primitiveID.includes(\"DataLakeNode\")})) {\n    removeNodes.push(node)\n}\nfor (let node of liveDashPanelMonitoring.masterGraph.nodes.filter(node => {return \"_remove_before_solver\" in node.tag.properties})) {\n    removeNodes.push(node)\n}\n\n\nfor (let rn of removeNodes) {\n    liveDashPanelMonitoring.masterGraph.remove(rn)\n}\n\nfor (const node_id in liveDashPanelMonitoring.nodes) {\n    let node = liveDashPanelMonitoring.nodes[node_id]\n    if (node_id.includes(\"DataLakeNode\")) {\n        delete node\n    } else {\n        for (const prop in node.tag.properties) {\n            if (typeof(node.tag.properties[prop].expression) === \"string\" && node.tag.properties[prop].expression !== \"\") {\n                node.tag.properties[prop].expression = JSON.stringify(node.tag.properties[prop].value)\n            } else {\n                node.tag.properties[prop].expression = node.tag.properties[prop].value\n            }\n        }\n    }\n}\nlet username = await usernamePromise\n\nlet tmpGraphName = `${liveDashPanelMonitoring.graphMeta.graphName}_tmp_${username}`\n\nawait interactionSystem.get(\"/supergraph/v1/fragments\").then(d => {\n    console.log(d)\n    let oldTmpFragments = d.data.fragments.filter(fr => {\n        return fr.name === tmpGraphName\n    })\n    for (let otf in oldTmpFragments) {\n        console.log(oldTmpFragments[otf])\n        interactionSystem.DELETERequest(`/supergraph/v1/fragments/${oldTmpFragments[otf].id}`)\n    }\n})\n\nawait liveDashPanelMonitoring.saveAs({\"name\": tmpGraphName}).then( fragment => {\n    console.log(fragment)\n    liveDashPanelWhatIf.openFromServer(fragment)\n    let fr = {\"id\": liveDashPanelMonitoring.graphMeta.graphID, \"name\": liveDashPanelMonitoring.graphMeta.graphName}\n    console.log(fr)\n    liveDashPanelMonitoring.openFromServer(fr)\n    workspaceSystem.setActiveTab(tabWhatIf)\n    }\n)\nnotificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            },
            {
              "name": "PPD select node 1",
              "args": null,
              "id": "undefined[PPD select node 1]",
              "callback": "async function anonymous(id\n) {\nApplication.autocomplete.LiveDashPanel_4.selectNodeById(id)\n}"
            },
            {
              "name": "PPD select node 2",
              "args": null,
              "id": "undefined[PPD select node 2]",
              "callback": "async function anonymous(id\n) {\nApplication.autocomplete.LiveDashPanel_5.selectNodeById(id)\n}"
            },
            {
              "name": "PPD Solver",
              "args": null,
              "id": "undefined[PPD Solver]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Solver\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\nlet dataSourceSystem = Application.autocomplete.DataSourceSystem\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nnotificationSystem.create(customActionTitle, \"Ожидайте окончания расчетов\", notificationSettingsInfo)\n\nawait liveDashPanelWhatIf.saveToServer({name: liveDashPanelWhatIf.graphMeta.graphName, id: liveDashPanelWhatIf.graphMeta.graphID})\nlet notificationSettingsWarning = {type: \"warning\", floatTime: 5, floatMode: true}\nif (!liveDashPanelWhatIf.masterGraph.nodes.toArray().find(node=>{return node.tag.primitiveID.includes(\"oil_kns\")}).tag.properties._check.value) {\n    notificationSystem.create(customActionTitle, \"Cумма всех закачек скважин не равна входящей\", notificationSettingsWarning)}\n\nlet solverOtl = `v2 | dtcd_read_graph \"${liveDashPanelWhatIf.graphMeta.graphName}\" | ks_prepare | ks_calc_df network_kind=water`\nawait dataSourceSystem.oneShotRun(\"otl\", {cache_ttl: 5, queryString: solverOtl})\n    .then(ds => {\n      \n        function processNode(node, line, usage) {\n            const nodeParamsMapping = {\n                \"start\": {\n                    \"res_P\": \"startP\",\n                    \"res_T\": \"startT\",\n                    \"res_Q_m3_day\": \"start_Q_m3_day\"\n                },\n                \"end\": {\n                    \"res_P\": \"endP\",\n                    \"res_T\": \"endT\",\n                    \"res_Q_m3_day\": \"end_Q_m3_day\"\n                },\n                \"edge\": {\n                    \"res_watercut_percent\": \"res_watercut_percent\",// Обводненность,TRUE\n                    \"res_liquid_density_kg_m3\": \"res_liquid_density_kg_m3\",// Плотность жидкости,\n                    \"res_pump_power_watt\": \"res_pump_power_watt\",// Мощность насоса,TRUE\n                    \"res_mass_flow_kg_sec\": \"X_kg_sec\",// Массовый поток,\n                    \"res_velocity_m_sec\": \"velocity_m_sec\"// Скорость потока,TRUE\n                }\n            };\n            let props = node.tag.properties;\n\n            if (\"junctionpoint\" === props.object_type.value){\n                return\n            }\n            console.log(\"eval \", usage, node.tag.primitiveID, props, line);\n            if (\n              \"start\" === usage ||\n              \"edge\" === usage ||\n              \"end\" === usage){\n                Object.entries(nodeParamsMapping[usage]).map(\n                  ([param,df]) => {\n                      props[param].expression = line[df];\n                      props[param].value = line[df];\n                      props[param].status = \"complete\";\n                  })\n            }\n        }\n\n        function findNode(propertyWithID, columnWithID, line) {\n            let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n                if (propertyWithID in node.tag.properties) {\n                    return String(node.tag.properties[propertyWithID].value) === String(line[columnWithID])\n                } else {\n                    return false\n                }\n            })\n            console.log(node)\n            return node\n        }\n\n        function processDfLine(line) {\n            let sourceNode = findNode(\"node_id\", \"node_id_start\", line)\n            if (null != sourceNode){\n                processNode(sourceNode, line, \"start\");\n            }\n            let targetNode = findNode(\"node_id\", \"node_id_end\", line)\n            if (null != targetNode){\n                processNode(targetNode, line, \"end\");\n            }\n\n            let edgeNode = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n                if (\n                  'node_id_start' in node.tag.properties &&\n                  'node_id_end' in node.tag.properties) {\n                    return String(line.node_id_start) === String(node.tag.properties.node_id_start.value) &&\n                      String(line.node_id_end) === String(node.tag.properties.node_id_end.value)\n                } else {\n                    return false;\n                }\n            });\n            if (null != edgeNode){\n                // console.log(\"process edgeNode\", edgeNode);\n                processNode(edgeNode, line, \"edge\");\n            }\n        };\n\n        Object.entries(ds).map(([id, line]) => {\n            processDfLine(line);\n        })\n\n        return true\n})\n     .then(t => {\n        liveDashPanelWhatIf.startCalculatingGraph()\n        notificationSystem.create(customActionTitle, \"Готово\", notificationSettingsSuccess)\n    })\n    .catch(()=>{\n        console.log(\"Solver flow failed\")\n        notificationSystem.create(customActionTitle, \"Что-то пошло не так\", notificationSettingsFail)})\n\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            },
            {
              "name": "PPD Apply a measure",
              "args": null,
              "id": "undefined[PPD Apply a measure]",
              "callback": "async function anonymous(\n) {\nlet customActionTitle = \"Apply a measure\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet workspaceSystem = Application.autocomplete.WorkspaceSystem\nlet liveDashPanelMonitoring = Application.autocomplete.LiveDashPanel_4\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\nlet tableExp = Application.autocomplete.Visualization_EditableTable_3\nlet tableMeasures = Application.autocomplete.Visualization_EditableTable_4\nlet storageSystem = Application.autocomplete.StorageSystem\n\nlet tabMonitoring = \"wss-tab-5465\"\nlet tabWhatIf = \"wss-tab-9479\"\nlet measures_boolean_column = \"to_do\"\n\nlet notificationSystem = Application.autocomplete.NotificationSystem\nlet notificationSettingsSuccess = {type: \"success\", floatTime: 5, floatMode: true}\nlet notificationSettingsFail = {type: \"error\", floatTime: 5, floatMode: true}\nlet notificationSettingsInfo = {type: \"info\", floatTime: 5, floatMode: true}\n\nlet interactionSystem = Application.autocomplete.InteractionSystem\n\nnotificationSystem.create(customActionTitle, \"Подождите\", notificationSettingsInfo)\n\nfunction getLongTableFromGraph(targetLiveDash) {\n    let table = [];\n    for (let node of liveDashPanelWhatIf.masterGraph.nodes) {\n        let primitiveID = node.tag.primitiveID\n        let nodeName = node.tag.properties.Name.value\n\n        for (let prop in node.tag.properties) {\n            if (prop === \"Name\") {\n                continue\n            }\n            let line = {\n                \"primitiveID\": primitiveID,\n                \"nodeName\": nodeName,\n                \"nodeProperty\": prop,\n                \"value\": node.tag.properties[prop].value,\n            }\n            table.push(line)\n        }\n    }\n    return table\n}\n\nfunction fill(node, properties, line) {\n    console.log(node, properties)\n    for (let property of properties) {\n        if (property in node.tag.properties) {\n            node.tag.properties[property].expression = line[property]\n            node.tag.properties[property].value = line[property]\n            node.tag.properties[property].status = \"complete\"\n            console.log(node.tag.properties[property])\n        } else {\n            console.log(`Node ${node.tag.primitiveID} doesn't have a property \"${property}\"`)\n        }\n    }\n}\n\nfunction findNode(propertyWithID, columnWithID, line) {\n    let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n            return Number(node.tag.properties[propertyWithID].expression) === Number(line[columnWithID])\n        } else {\n            return false\n        }\n    })\n    console.log(node)\n    return node\n}\n\nlet measuresDataset = tableMeasures.getDatasetFromTable().filter(lineFromMeasures  => {return lineFromMeasures[measures_boolean_column]})\nconsole.log(measuresDataset)\n\nfor (let i in measuresDataset) {\n    let line = measuresDataset[i]\n    console.log(line)\n    if (\"node_id\" in line && line.node_id !== null && line.node_id !== \"undefined\") {\n        let node = findNode(\"node_id\", \"node_id\", line)\n        if (node === null) {\n            console.log(`Node ${line.node_id} from dataset is not presented in the graph`)\n        } else {\n            // fill(node, wellProperties, line)\n            fill(node, Object.keys(line), line)\n        }\n    } else {\n        let node = findNode(\"node_id_start\", \"node_id_start\", line)\n        if (node === null) {\n            console.log(`Node ${line.node_id_start} (else section) from dataset is not presented in the graph`)\n        } else {\n            // fill(node, pipeProperties, line)\n            fill(node, Object.keys(line), line)\n        }\n    }\n}\n\nlet tableExperiments = tableExp.getDatasetFromTable()\n\nawait Application.autocomplete.EventSystem.actions.find(ac => {return ac.name === \"Solver\"}).callback()\n\nlet tableFromWhatIf = getLongTableFromGraph(liveDashPanelWhatIf)\n\nlet experiments = storageSystem.session.getRecord(\"experimentsPPD\")\nif (experiments && experiments.length !==0) {\n    experiments.push(tableFromWhatIf)\n} else {\n    experiments = [tableFromWhatIf]\n}\nstorageSystem.session.putRecord(\"experimentsPPD\", experiments)\n\nlet updatedTable = []\n\nfor (let lineFromTable in tableExperiments) {\n    console.log(\"---\")\n    console.log(tableExperiments[lineFromTable])\n    let lineFromCurrentExperiment = tableFromWhatIf.find(l => {return l.nodeName === tableExperiments[lineFromTable].nodeName && l.nodeProperty === tableExperiments[lineFromTable].nodeProperty})\n    console.log(lineFromCurrentExperiment)\n    let updatedLine = tableExperiments[lineFromTable]\n    updatedLine[`Experiment ${experiments.length}`] = lineFromCurrentExperiment.value\n    console.log(updatedLine)\n    updatedTable.push(updatedLine)\n}\n\ntableExp.loadSchema(updatedTable[0])\ntableExp.loadData(updatedTable)\nstorageSystem.session.putRecord(\"expTablePPD\", updatedTable)\n}"
            },
            {
              "name": "PPD Load history",
              "args": null,
              "id": "undefined[PPD Load history]",
              "callback": "async function anonymous(e\n) {\nlet customActionTitle = \"Load history\"\nconsole.log(`Custom action \"${customActionTitle}\" started`)\nlet liveDashPanelWhatIf = Application.autocomplete.LiveDashPanel_5\nlet storageSystem = Application.autocomplete.StorageSystem\n\nfunction findNode(propertyWithID, columnWithID, line) {\n    console.log(propertyWithID, columnWithID, line)\n    let node = liveDashPanelWhatIf.masterGraph.nodes.find(node => {\n        if (propertyWithID in node.tag.properties) {\n            return node.tag.properties[propertyWithID].value === line[columnWithID]\n        } else {\n            return false\n        }\n    })\n    console.log(node)\n    return node\n}\n\nlet eventColumn = e.column\nif (eventColumn.includes(\"Experiment\")) {\n    let experimentNumber = eventColumn.split(\" \")[1]\n\n    let experiments = storageSystem.session.getRecord(\"experimentsPPD\")\n    let experiment = experiments[experimentNumber - 1]\n\n    for (let i in experiment) {\n        let line = experiment[i]\n        console.log(line)\n        let targetNode = findNode(\"Name\", \"nodeName\", line)\n        targetNode[line.nodeProperty] = line.value\n    }\n    console.log(\"Graph was loaded\")\n} else {\n    console.log(\"Not experiment column was clicked\")\n}\n\n\nconsole.log(`Custom action \"${customActionTitle}\" finished`)\n}"
            }
          ]
        }
      },
      {
        "guid": "InteractionSystem_0_4_0",
        "meta": {
          "type": "core",
          "title": "Система взаимодействия",
          "name": "InteractionSystem",
          "version": "0.4.0",
          "withDependencies": false,
          "priority": 4
        },
        "config": null
      },
      {
        "guid": "StorageSystem_0_9_0",
        "meta": {
          "type": "core",
          "name": "StorageSystem",
          "title": "Система хранения данных",
          "version": "0.9.0",
          "priority": 3
        },
        "config": {
          "tokens": []
        }
      },
      {
        "guid": "StyleSystem_0_13_0",
        "meta": {
          "version": "0.13.0",
          "name": "StyleSystem",
          "type": "core",
          "title": "Дизайн система",
          "priority": 3,
          "withDependencies": false
        },
        "config": null
      },
      {
        "guid": "DataSourceSystem_0_5_0",
        "meta": {
          "type": "core",
          "name": "DataSourceSystem",
          "title": "Cистема источников данных",
          "priority": 2.5,
          "withDependencies": false,
          "version": "0.5.0"
        },
        "config": {
          "sources": {
            "Measurements": {
              "datasourceParams": {
                "queryString": "| readfile format=csv path=measurements.csv | fields - primitiveID | table to_do, Name, * | eval to_do = false",
                "cache_ttl": 10,
                "queryWriteString": "| writeFile format=csv path=measurements.csv"
              },
              "type": "otlrw"
            }
          },
          "autorun": true,
          "runOnTokenChange": false
        }
      },
      {
        "guid": "WorkspaceSystem_0_15_0",
        "meta": {
          "name": "WorkspaceSystem",
          "type": "core",
          "title": "Система рабочего стола",
          "version": "0.15.0",
          "priority": 2
        },
        "config": null
      },
      {
        "guid": "AuthSystem_0_1_0",
        "meta": {
          "type": "core",
          "title": "Система аутентификации",
          "name": "AuthSystem",
          "version": "0.1.0",
          "withDependencies": false,
          "priority": 1.5
        },
        "config": null
      },
      {
        "guid": "AppGUISystem_0_4_0",
        "meta": {
          "version": "0.4.0",
          "name": "AppGUISystem",
          "type": "core",
          "title": "Система основного интерфейса приложения",
          "withDependencies": false,
          "priority": 1
        },
        "config": null
      },
      {
        "guid": "NotificationSystem_0_1_1",
        "meta": {
          "version": "0.1.1",
          "type": "core",
          "title": "Система уведомлений",
          "name": "NotificationSystem",
          "priority": 1
        },
        "config": null
      },
      {
        "guid": "RouteSystem_0_4_0",
        "meta": {
          "type": "core",
          "title": "Система роутинга",
          "name": "RouteSystem",
          "version": "0.4.0",
          "withDependencies": false,
          "priority": 0.9
        },
        "config": null
      },
      {
        "guid": "LiveDashPanel_2",
        "meta": {
          "type": "panel",
          "name": "LiveDashPanel",
          "title": "Панель полотна примитивов",
          "withDependencies": true,
          "version": "0.16.0"
        },
        "config": {
          "graphID": "f32f1154-adc7-472f-85da-e0c6f4575746",
          "graphName": "demo_neftesbor (6).json",
          "isPortLabelVisible": false,
          "isMapLayerEnabled": false,
          "mapLayerGeoCoordsProp": "geoCoords",
          "mapLayerTileServer": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
        },
        "position": {
          "h": 32,
          "w": 15,
          "x": 4,
          "y": 0,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitiveLibraryPanel_2",
        "meta": {
          "version": "0.8.0",
          "type": "panel",
          "name": "PrimitiveLibraryPanel",
          "title": "Панель библиотеки примитивов",
          "withDependencies": true
        },
        "config": {
          "primitivesDisplayType": "icon"
        },
        "position": {
          "h": 16,
          "w": 4,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitivePropertiesPanel_1",
        "meta": {
          "version": "0.9.0",
          "type": "panel",
          "name": "PrimitivePropertiesPanel",
          "title": "Панель свойств примитивов",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 29,
          "w": 5,
          "x": 19,
          "y": 3,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "LiveDashPanel_3",
        "meta": {
          "type": "panel",
          "name": "LiveDashPanel",
          "title": "Панель полотна примитивов",
          "withDependencies": true,
          "version": "0.16.0"
        },
        "config": {
          "graphID": "4471ed30-fb3a-40e4-b5d3-c2e62b982c8c",
          "graphName": "demo_neftesbor_tmp_admin",
          "isPortLabelVisible": true,
          "isMapLayerEnabled": false,
          "mapLayerGeoCoordsProp": "geoCoords",
          "mapLayerTileServer": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
        },
        "position": {
          "h": 52,
          "w": 15,
          "x": 5,
          "y": 0,
          "tabId": "wss-tab-9078"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitivePropertiesPanel_2",
        "meta": {
          "version": "0.9.0",
          "type": "panel",
          "name": "PrimitivePropertiesPanel",
          "title": "Панель свойств примитивов",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 30,
          "w": 5,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-9078"
        },
        "toFixPanel": false
      },
      {
        "guid": "GraphStructurePanel_1",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "GraphStructurePanel",
          "title": "Панель структуры графа",
          "withDependencies": true
        },
        "config": {},
        "position": {
          "h": 20,
          "w": 5,
          "x": 0,
          "y": 32,
          "tabId": "wss-tab-9078"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_1",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "What-If"
        },
        "position": {
          "h": 3,
          "w": 4,
          "x": 0,
          "y": 16,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_2",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Запустить расчет"
        },
        "position": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 30,
          "tabId": "wss-tab-9078"
        },
        "toFixPanel": false
      },
      {
        "guid": "EventSystemPanel_1",
        "meta": {
          "version": "0.5.0",
          "type": "panel",
          "name": "EventSystemPanel",
          "title": "Панель системы событий и действий",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 46,
          "w": 17,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-5319"
        },
        "toFixPanel": false
      },
      {
        "guid": "Visualization_EditableTable_1",
        "meta": {
          "version": "0.2.0",
          "type": "panel",
          "name": "Visualization_EditableTable",
          "title": "Визуализация - Редактируемая таблица",
          "withDependencies": true
        },
        "config": {
          "title": "Эксперименты",
          "columnOptions": "{}",
          "dataSource": "",
          "writeTokenName": ""
        },
        "position": {
          "h": 16,
          "w": 24,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-1947"
        },
        "toFixPanel": false
      },
      {
        "guid": "Visualization_EditableTable_2",
        "meta": {
          "version": "0.2.0",
          "type": "panel",
          "name": "Visualization_EditableTable",
          "title": "Визуализация - Редактируемая таблица",
          "withDependencies": true
        },
        "config": {
          "title": "Мероприятия",
          "columnOptions": "{}",
          "dataSource": "Measurements",
          "writeTokenName": ""
        },
        "position": {
          "h": 13,
          "w": 24,
          "x": 0,
          "y": 18,
          "tabId": "wss-tab-1947"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_3",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Применить мероприятия"
        },
        "position": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 16,
          "tabId": "wss-tab-1947"
        },
        "toFixPanel": false
      },
      {
        "guid": "GraphStructurePanel_2",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "GraphStructurePanel",
          "title": "Панель структуры графа",
          "withDependencies": true
        },
        "config": {},
        "position": {
          "h": 13,
          "w": 4,
          "x": 0,
          "y": 19,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitiveLibraryPanel_3",
        "meta": {
          "version": "0.8.0",
          "type": "panel",
          "name": "PrimitiveLibraryPanel",
          "title": "Панель библиотеки примитивов",
          "withDependencies": true
        },
        "config": {
          "primitivesDisplayType": "icon"
        },
        "position": {
          "h": 52,
          "w": 4,
          "x": 20,
          "y": 0,
          "tabId": "wss-tab-9078"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_4",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Обновить"
        },
        "position": {
          "h": 3,
          "w": 5,
          "x": 19,
          "y": 0,
          "tabId": "wss-tab-5720"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitivePropertiesPanel_4",
        "meta": {
          "version": "0.9.0",
          "type": "panel",
          "name": "PrimitivePropertiesPanel",
          "title": "Панель свойств примитивов",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 30,
          "w": 10,
          "x": 0,
          "y": 104,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitiveLibraryPanel_4",
        "meta": {
          "version": "0.8.0",
          "type": "panel",
          "name": "PrimitiveLibraryPanel",
          "title": "Панель библиотеки примитивов",
          "withDependencies": true
        },
        "config": {
          "primitivesDisplayType": "icon"
        },
        "position": {
          "h": 16,
          "w": 4,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "LiveDashPanel_4",
        "meta": {
          "type": "panel",
          "name": "LiveDashPanel",
          "title": "Панель полотна примитивов",
          "withDependencies": true,
          "version": "0.16.0"
        },
        "config": {
          "graphID": "7c5c8b57-c1f9-4c7f-bd83-9423028dfd28",
          "graphName": "kns1_zakachka",
          "isPortLabelVisible": false,
          "isMapLayerEnabled": false,
          "mapLayerGeoCoordsProp": "geoCoords",
          "mapLayerTileServer": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
        },
        "position": {
          "h": 32,
          "w": 15,
          "x": 4,
          "y": 0,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_5",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Обновить"
        },
        "position": {
          "h": 3,
          "w": 5,
          "x": 19,
          "y": 0,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitivePropertiesPanel_5",
        "meta": {
          "version": "0.9.0",
          "type": "panel",
          "name": "PrimitivePropertiesPanel",
          "title": "Панель свойств примитивов",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 29,
          "w": 5,
          "x": 19,
          "y": 3,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_6",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "What-If"
        },
        "position": {
          "h": 3,
          "w": 4,
          "x": 0,
          "y": 16,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "GraphStructurePanel_3",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "GraphStructurePanel",
          "title": "Панель структуры графа",
          "withDependencies": true
        },
        "config": {},
        "position": {
          "h": 13,
          "w": 4,
          "x": 0,
          "y": 19,
          "tabId": "wss-tab-5465"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitivePropertiesPanel_6",
        "meta": {
          "version": "0.9.0",
          "type": "panel",
          "name": "PrimitivePropertiesPanel",
          "title": "Панель свойств примитивов",
          "withDependencies": true
        },
        "config": null,
        "position": {
          "h": 30,
          "w": 5,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "LiveDashPanel_5",
        "meta": {
          "type": "panel",
          "name": "LiveDashPanel",
          "title": "Панель полотна примитивов",
          "withDependencies": true,
          "version": "0.16.0"
        },
        "config": {
          "graphID": "71537414-8553-4fb6-9c4b-a58c5fc91535",
          "graphName": "demo_ppd.json_tmp_admin",
          "isPortLabelVisible": true,
          "isMapLayerEnabled": false,
          "mapLayerGeoCoordsProp": "geoCoords",
          "mapLayerTileServer": "https://tile.openstreetmap.org/{z}/{x}/{y}.png"
        },
        "position": {
          "h": 52,
          "w": 15,
          "x": 5,
          "y": 0,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "PrimitiveLibraryPanel_5",
        "meta": {
          "version": "0.8.0",
          "type": "panel",
          "name": "PrimitiveLibraryPanel",
          "title": "Панель библиотеки примитивов",
          "withDependencies": true
        },
        "config": {
          "primitivesDisplayType": "icon"
        },
        "position": {
          "h": 52,
          "w": 4,
          "x": 20,
          "y": 0,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_7",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Запустить расчет"
        },
        "position": {
          "h": 2,
          "w": 5,
          "x": 0,
          "y": 30,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "GraphStructurePanel_4",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "GraphStructurePanel",
          "title": "Панель структуры графа",
          "withDependencies": true
        },
        "config": {},
        "position": {
          "h": 20,
          "w": 5,
          "x": 0,
          "y": 32,
          "tabId": "wss-tab-9479"
        },
        "toFixPanel": false
      },
      {
        "guid": "Visualization_EditableTable_3",
        "meta": {
          "version": "0.2.0",
          "type": "panel",
          "name": "Visualization_EditableTable",
          "title": "Визуализация - Редактируемая таблица",
          "withDependencies": true
        },
        "config": {
          "title": "Эксперименты",
          "columnOptions": "{}",
          "dataSource": "",
          "writeTokenName": ""
        },
        "position": {
          "h": 16,
          "w": 24,
          "x": 0,
          "y": 0,
          "tabId": "wss-tab-5058"
        },
        "toFixPanel": false
      },
      {
        "guid": "ButtonPanel_8",
        "meta": {
          "version": "0.3.0",
          "type": "panel",
          "name": "ButtonPanel",
          "title": "Кнопка",
          "withDependencies": true
        },
        "config": {
          "title": "Применить мероприятия"
        },
        "position": {
          "h": 2,
          "w": 24,
          "x": 0,
          "y": 16,
          "tabId": "wss-tab-5058"
        },
        "toFixPanel": false
      },
      {
        "guid": "Visualization_EditableTable_4",
        "meta": {
          "version": "0.2.0",
          "type": "panel",
          "name": "Visualization_EditableTable",
          "title": "Визуализация - Редактируемая таблица",
          "withDependencies": true
        },
        "config": {
          "title": "Мероприятия",
          "columnOptions": "{}",
          "dataSource": "Measurements",
          "writeTokenName": ""
        },
        "position": {
          "h": 13,
          "w": 24,
          "x": 0,
          "y": 18,
          "tabId": "wss-tab-5058"
        },
        "toFixPanel": false
      }
    ],
    "tabPanelsConfig": {
      "editMode": false,
      "visibleNavBar": true,
      "tabsOptions": [
        {
          "id": "wss-tab-5720",
          "name": "Monitoring",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-9078",
          "name": "What-If",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-1947",
          "name": "Measures",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-5465",
          "name": "PPD Monitoring",
          "isActive": true,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-9479",
          "name": "PPD What-If",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-5058",
          "name": "PPD Measures",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        },
        {
          "id": "wss-tab-5319",
          "name": "control",
          "isActive": false,
          "editName": false,
          "tabPanel": {}
        }
      ]
    },
    "visibleTabNavBar": true,
    "panelBorderWidth": "2px",
    "panelBorderStyle": "solid",
    "panelBorderColor": "var(--background_secondary)"
  },
  "id": "282884d8-d140-4d39-b576-a41ccb9f55d7",
  "path": "",
  "title": "WhatIf v0.7.0 FOR DEMO",
  "meta": {
    "description": "",
    "icon": 16,
    "color": [
      3,
      4
    ]
  },
  "creation_time": 1677672082.070599,
  "modification_time": 1677672296.1846793,
  "is_dir": false,
  "permissions": {
    "create": true,
    "read": true,
    "update": true,
    "delete": true
  },
  "plugin": "dtcd_workspaces"
}